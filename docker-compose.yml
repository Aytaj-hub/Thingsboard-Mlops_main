version: '3.0'
services:
  mytb:
    restart: always
    image: "thingsboard/tb-postgres"
    ports:
      - "9090:9090"
      - "1883:1883"
      - "7070:7070"
      - "5683-5688:5683-5688/udp"
    environment:
      TB_QUEUE_TYPE: in-memory
    volumes:
      - mytb-data:/data
      - mytb-logs:/var/log/thingsboard
    networks:
      custom-network:
        ipv4_address: 172.20.0.10

  mytrendz:
    restart: always
    image: "thingsboard/trendz:1.11.0"
    ports:
      - "8888:8888"
    environment:
      TB_API_URL: http://172.20.0.10:9090
      TRENDZ_LICENSE_SECRET: ${TRENDZ_LICENSE_SECRET}
      TRENDZ_LICENSE_INSTANCE_DATA_FILE: /data/license.data
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/trendz
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SCRIPT_ENGINE_PROVIDER: DOCKER_CONTAINER
      SCRIPT_ENGINE_DOCKER_PROVIDER_URL: mypyexecutor:8080
      SCRIPT_ENGINE_TIMEOUT: 30000
    volumes:
      - mytrendz-data:/data
      - mytrendz-logs:/var/log/trendz
    networks:
      custom-network:
        ipv4_address: 172.20.0.11

  # mypyexecutor:
  #   restart: always
  #   image: "thingsboard/trendz-python-executor:1.11.0"
  #   ports:
  #     - "8085:8080"
  #   environment:
  #     SCRIPT_ENGINE_RUNTIME_TIMEOUT: 30000
  #     EXECUTOR_MANAGER: 1
  #     EXECUTOR_SCRIPT_ENGINE: 6
  #     THROTTLING_QUEUE_CAPACITY: 10
  #     THROTTLING_THREAD_POOL_SIZE: 6
  #     NETWORK_BUFFER_SIZE: 10485760
  #   networks:
  #     custom-network:
  #       ipv4_address: 172.20.0.12


  mypyexecutor:
    restart: always
    build:
      context: ./trendz  # Path to your Dockerfile directory
      dockerfile: Dockerfile  # Name of the Dockerfile
    ports:
      - "8085:8080"
    environment:
      SCRIPT_ENGINE_RUNTIME_TIMEOUT: 30000
      EXECUTOR_MANAGER: 1
      EXECUTOR_SCRIPT_ENGINE: 6
      THROTTLING_QUEUE_CAPACITY: 10
      THROTTLING_THREAD_POOL_SIZE: 6
      NETWORK_BUFFER_SIZE: 10485760
    networks:
      custom-network:
        ipv4_address: 172.20.0.12


  postgres:
    restart: always
    image: "postgres:15"
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: trendz
      POSTGRES_PASSWORD: postgres
    volumes:
      - mytrendz-data-db:/var/lib/postgresql/data
    networks:
      custom-network:
        ipv4_address: 172.20.0.13

  fastapi-app:   
    build:
      context: . 
      dockerfile: Dockerfile 
    ports:
      - "8060:8060"  
    volumes:
      - ./myFastapi:/app  
    networks:
      custom-network:
        ipv4_address: 172.20.0.14

  mysql:
    restart: always
    image: mysql
    container_name: mlflow_mysql
    ports:
      - "3306:3306"
    env_file:
      - .env
    environment:
      MYSQL_DATABASE: MYSQL_DATABASE
      AIRFLOW__DATABASE_DATABASE : AIRFLOW__DATABASE_DATABASE
      MYSQL_USER:  MYSQL_USER
      MYSQL_PASSWORD: MYSQL_PASSWORD
      MYSQL_ROOT_PASSWORD: MYSQL_ROOT_PASSWORD
    volumes:
      - mysql_data:/var/lib/mysql 
      - ./sql_scripts:/docker-entrypoint-initdb.d
    networks:
      custom-network:
        ipv4_address: 172.20.0.15

  minio:
    image: minio/minio
    container_name: minio_server
    restart: always
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"       # MinIO API Port
      - "9001:9001"       # MinIO Console Port
    command: server /data --console-address ":9001"
    networks:
      custom-network:
        ipv4_address: 172.20.0.16

  mlflow:
    restart: always
    build:
      context: ./mlflow
      dockerfile: Dockerfile
    container_name: mlflow_server
    ports:
      - "5000:5000"
    environment:
      # MinIO Configuration
      MLFLOW_S3_ENDPOINT_URL: http://minio_server:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      # MySQL Configuration
      MYSQL_DATABASE: MYSQL_DATABASE
      MYSQL_USER: MYSQL_USER
      MYSQL_PASSWORD: MYSQL_PASSWORD
      # MLflow Configuration
      BACKEND_STORE_URI: mysql+pymysql://MYSQL_USER:MYSQL_PASSWORD@mlflow_mysql:3306/MYSQL_DATABASE
      ARTIFACT_STORE: s3://${S3_MLFLOW_BUCKET}
    command: >
      mlflow server 
      --backend-store-uri $${BACKEND_STORE_URI} 
      --default-artifact-root $${ARTIFACT_STORE} 
      --serve-artifacts 
      --host 0.0.0.0
    depends_on:
      - mysql
      - minio
    volumes:
      - mlflow-data:/mlflow
    networks:
      custom-network:
        ipv4_address: 172.20.0.17

##################################################################################################
  x-airflow-common: &airflow-common
    build: ./airflow
    image: ${AIRFLOW_IMAGE_NAME:-extending_airflow:latest}
    environment: &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
    depends_on:
      postgres_airflow:
        condition: service_healthy

  postgres_airflow:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - 5433:5433
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8020:8020
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8020/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}



  
 
#################################################################################################









networks:
  custom-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mytb-data:
    external: true
  mytb-logs:
    external: true
  mytrendz-data:
    external: true
  mytrendz-logs:
    external: true
  mytrendz-data-db:
    external: true
  mysql_data:
  minio_data:
  mlflow-data:
  postgres-db-volume:



# volumes:
#   mytb-data:
#     external: true
#   mytb-logs:
#     external: true